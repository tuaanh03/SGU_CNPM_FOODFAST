import redisClient from '../lib/redis';
import prisma from '../lib/prisma';
import { publishOrderExpirationEvent } from './kafka';

/**
 * Redis Order Session Manager
 * Qu·∫£n l√Ω session timeout cho orders b·∫±ng Redis TTL
 */

// C·∫•u h√¨nh
const ORDER_SESSION_DURATION_MINUTES = parseInt(process.env.ORDER_SESSION_DURATION_MINUTES || '15');
const REDIS_KEY_PREFIX = 'order:session:';

/**
 * T·∫°o session cho order trong Redis v·ªõi TTL
 * Key format: order:session:{orderId}
 * Value: {userId, totalPrice, createdAt}
 * TTL: ORDER_SESSION_DURATION_MINUTES ph√∫t
 */
export async function createOrderSession(
    orderId: string,
    userId: string,
    totalPrice: number,
    sessionDurationMinutes: number = ORDER_SESSION_DURATION_MINUTES
): Promise<{ expirationTime: Date; durationMinutes: number }> {
    const key = `${REDIS_KEY_PREFIX}${orderId}`;
    const ttlSeconds = sessionDurationMinutes * 60;

    // T√≠nh th·ªùi gian h·∫øt h·∫°n
    const expirationTime = new Date(Date.now() + ttlSeconds * 1000);

    // L∆∞u session data v√†o Redis v·ªõi TTL
    const sessionData = {
        orderId,
        userId,
        totalPrice,
        createdAt: new Date().toISOString(),
        expirationTime: expirationTime.toISOString(),
    };

    await redisClient.setex(
        key,
        ttlSeconds,
        JSON.stringify(sessionData)
    );

    console.log(`‚úÖ Created Redis session for order ${orderId}, expires in ${sessionDurationMinutes} minutes`);

    return {
        expirationTime,
        durationMinutes: sessionDurationMinutes
    };
}

/**
 * Ki·ªÉm tra session c√≥ c√≤n t·ªìn t·∫°i kh√¥ng
 */
export async function checkOrderSession(orderId: string): Promise<boolean> {
    const key = `${REDIS_KEY_PREFIX}${orderId}`;
    const exists = await redisClient.exists(key);
    return exists === 1;
}

/**
 * L·∫•y th√¥ng tin session
 */
export async function getOrderSession(orderId: string): Promise<any | null> {
    const key = `${REDIS_KEY_PREFIX}${orderId}`;
    const data = await redisClient.get(key);

    if (!data) return null;

    try {
        return JSON.parse(data);
    } catch (error) {
        console.error('Error parsing session data:', error);
        return null;
    }
}

/**
 * X√≥a session (khi thanh to√°n th√†nh c√¥ng)
 */
export async function deleteOrderSession(orderId: string): Promise<void> {
    const key = `${REDIS_KEY_PREFIX}${orderId}`;
    await redisClient.del(key);
    console.log(`üóëÔ∏è  Deleted Redis session for order ${orderId}`);
}

/**
 * L·∫•y TTL c√≤n l·∫°i c·ªßa session (gi√¢y)
 */
export async function getSessionTTL(orderId: string): Promise<number> {
    const key = `${REDIS_KEY_PREFIX}${orderId}`;
    return await redisClient.ttl(key); // -1: no expire, -2: key not exists, >0: seconds remaining
}

/**
 * Handler cho Redis keyspace notifications (expired events)
 * Ph·∫£i b·∫≠t config: notify-keyspace-events Ex
 *
 * H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi khi m·ªôt key h·∫øt h·∫°n
 */
export async function handleExpiredOrderSession(expiredKey: string): Promise<void> {
    try {
        // expiredKey format: order:session:{orderId}
        const orderId = expiredKey.replace(REDIS_KEY_PREFIX, '');

        console.log(`‚è∞ Order session expired: ${orderId}`);

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i order trong database
        const order = await prisma.order.findUnique({
            where: { id: orderId }
        });

        if (!order) {
            console.log(`Order ${orderId} not found in database`);
            return;
        }

        // Ch·ªâ c·∫≠p nh·∫≠t n·∫øu order v·∫´n ƒëang pending
        if (order.status === 'pending') {
            await prisma.order.update({
                where: { id: orderId },
                data: { status: 'cancelled' }
            });

            console.log(`‚úÖ Updated order ${orderId} status to CANCELLED (expired)`);

            // G·ª≠i event ƒë·∫øn Payment Service ƒë·ªÉ c·∫≠p nh·∫≠t PaymentIntent v√† PaymentAttempt
            try {
                await publishOrderExpirationEvent({
                    orderId: order.id,
                    userId: order.userId,
                    reason: 'SESSION_EXPIRED',
                    timestamp: new Date().toISOString()
                });
                console.log(`üì§ Published order.expired event for order ${orderId}`);
            } catch (kafkaError) {
                console.error(`Failed to publish order.expired event for order ${orderId}:`, kafkaError);
            }
        } else {
            console.log(`Order ${orderId} already has status: ${order.status}, skipping update`);
        }

    } catch (error) {
        console.error('Error handling expired order session:', error);
    }
}

/**
 * Kh·ªüi t·∫°o listener cho Redis expired events
 * Ph·∫£i g·ªçi h√†m n√†y khi start server
 */
export function initializeRedisExpirationListener(): void {
    // T·∫°o subscriber client ri√™ng cho pub/sub
    const subscriberClient = redisClient.duplicate();

    // Subscribe v√†o channel expired events
    // Pattern: __keyevent@{db}__:expired
    const db = parseInt(process.env.REDIS_DB || '0');
    const expiredChannel = `__keyevent@${db}__:expired`;

    subscriberClient.subscribe(expiredChannel, (err) => {
        if (err) {
            console.error('‚ùå Failed to subscribe to Redis expired events:', err);
            return;
        }
        console.log(`‚úÖ Subscribed to Redis expired events on channel: ${expiredChannel}`);
    });

    // Handle expired events
    subscriberClient.on('message', async (channel, message) => {
        // message ch√≠nh l√† key ƒë√£ expired
        if (message.startsWith(REDIS_KEY_PREFIX)) {
            await handleExpiredOrderSession(message);
        }
    });

    console.log('üéß Redis expiration listener initialized');
}

