services:
  # Kafka & Zookeeper setup
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - network
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - network
    volumes:
      - kafka_data:/var/lib/kafka/data

  # Gateway service (acts as the proxy)
  api-gateway:
    build:
      context: ./backend/services/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    env_file:
      - ./backend/services/api-gateway/.env
    ports:
      - "3000:3000"
    networks:
      - network

  # User service
  user-service:
    build:
      context: ./backend/services/user-service
      dockerfile: Dockerfile
    container_name: user-service
    env_file:
      - ./backend/services/user-service/.env
    ports:
      - "1000:1000"
    networks:
      - network
    depends_on:
      - user-db
    volumes:
      - ./backend/services/user-service/prisma:/app/user-service/prisma:rw
    command: >
      sh -c "
        npx prisma generate &&
        npx prisma db push &&
        node dist/server.js
      "
  user-db:
    image: postgres:15-alpine
    container_name: user-db
    restart: always
    env_file:
      - ./backend/services/user-service/.env
    ports:
      - "5432:5432"
      - "5554:5555"
    volumes:
      - userdb:/var/lib/postgresql/data
    networks:
      - network

  # Order service
  order-service:
    build:
      context: ./backend/services/order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "2000:2000"
    env_file:
      - ./backend/services/order-service/.env
    networks:
      - network
    depends_on:
      - order-db
      - kafka

  order-db:
    image: postgres:15-alpine
    container_name: order-db
    env_file:
      - ./backend/services/order-service/.env
    ports:
      - "5433:5432"
      - "5556:5555"
    volumes:
      - orderdb:/var/lib/postgresql/data
    networks:
      - network

  # Product service
  product-service:
    build:
      context: ./backend/services/product-service
      dockerfile: Dockerfile
    container_name: product-service
    env_file:
      - ./backend/services/product-service/.env
    ports:
      - "3004:3004"
    networks:
      - network
    depends_on:
      - product-db
      - kafka

  product-db:
    image: postgres:15-alpine
    container_name: product-db
    env_file:
      - ./backend/services/product-service/.env
    ports:
      - "5434:5432"
      - "5555:5555"
    volumes:
      - productdb:/var/lib/postgresql/data
    networks:
      - network

  # Payment service
  payment-service:
    build:
      context: ./backend/services/payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    env_file:
      - ./backend/services/payment-service/.env
    ports:
      - "4000:4000"
    networks:
      - network
    depends_on:
      - kafka

  # Notification service
  notification-service:
    build:
      context: ./backend/services/notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "5001:5000"
    env_file:
      - ./backend/services/notification-service/.env
    networks:
      - network
    depends_on:
      - kafka

volumes:
  userdb:
  orderdb:
  productdb:
  kafka_data:
  zookeeper_data:
  zookeeper_log:

networks:
  network:
    driver: bridge
