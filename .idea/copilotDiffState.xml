<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend/services/order-service/prisma/migrations/20251007000000_init/migration.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/services/order-service/prisma/migrations/20251007000000_init/migration.sql" />
              <option name="updatedContent" value="-- CreateTable Order&#10;CREATE TABLE &quot;Order&quot; (&#10;  &quot;id&quot; TEXT PRIMARY KEY,&#10;  &quot;userId&quot; TEXT NOT NULL,&#10;  &quot;totalPrice&quot; INTEGER NOT NULL,&#10;  &quot;deliveryAddress&quot; TEXT NOT NULL,&#10;  &quot;contactPhone&quot; TEXT NOT NULL,&#10;  &quot;note&quot; TEXT,&#10;  &quot;status&quot; TEXT NOT NULL,&#10;  &quot;createdAt&quot; TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,&#10;  &quot;updatedAt&quot; TIMESTAMP(3) NOT NULL&#10;);&#10;&#10;-- CreateTable OrderItem&#10;CREATE TABLE &quot;OrderItem&quot; (&#10;  &quot;id&quot; TEXT PRIMARY KEY,&#10;  &quot;orderId&quot; TEXT NOT NULL,&#10;  &quot;productId&quot; TEXT NOT NULL,&#10;  &quot;productName&quot; TEXT NOT NULL,&#10;  &quot;productPrice&quot; INTEGER NOT NULL,&#10;  &quot;quantity&quot; INTEGER NOT NULL&#10;);&#10;&#10;-- AddForeignKey&#10;ALTER TABLE &quot;OrderItem&quot; ADD CONSTRAINT &quot;OrderItem_orderId_fkey&quot; FOREIGN KEY (&quot;orderId&quot;) REFERENCES &quot;Order&quot;(&quot;id&quot;) ON DELETE CASCADE ON UPDATE CASCADE;&#10;&#10;-- Indexes&#10;CREATE INDEX &quot;Order_userId_idx&quot; ON &quot;Order&quot;(&quot;userId&quot;);&#10;CREATE INDEX &quot;Order_status_idx&quot; ON &quot;Order&quot;(&quot;status&quot;);&#10;CREATE INDEX &quot;OrderItem_orderId_idx&quot; ON &quot;OrderItem&quot;(&quot;orderId&quot;);&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/services/product-service/prisma/migrations/20251007000500_add_storeId_to_product/migration.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/services/product-service/prisma/migrations/20251007000500_add_storeId_to_product/migration.sql" />
              <option name="updatedContent" value="-- AlterTable: add storeId to Product&#10;ALTER TABLE &quot;Product&quot; ADD COLUMN IF NOT EXISTS &quot;storeId&quot; TEXT;&#10;&#10;-- Index for storeId&#10;CREATE INDEX IF NOT EXISTS &quot;Product_storeId_idx&quot; ON &quot;Product&quot;(&quot;storeId&quot;);&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/cnmp-fooddelivery/src/components/MenuSection.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/cnmp-fooddelivery/src/components/MenuSection.tsx" />
              <option name="updatedContent" value="import { Card, CardContent } from &quot;@/components/ui/card&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Badge } from &quot;@/components/ui/badge&quot;;&#10;import { Star, Plus, Minus } from &quot;lucide-react&quot;;&#10;import { useCart } from &quot;@/contexts/cart-context&quot;;&#10;&#10;interface MenuItem {&#10;  id: number;&#10;  name: string;&#10;  description: string;&#10;  price: number;&#10;  image: string;&#10;  popular: boolean;&#10;}&#10;&#10;interface MenuSectionData {&#10;  category: string;&#10;  items: MenuItem[];&#10;}&#10;&#10;interface MenuSectionProps {&#10;  section: MenuSectionData;&#10;  restaurantId: number;&#10;  restaurantName: string;&#10;}&#10;&#10;const MenuSection = ({ section, restaurantId, restaurantName }: MenuSectionProps) =&gt; {&#10;  const { state, dispatch } = useCart();&#10;&#10;  const formatPrice = (price: number) =&gt; {&#10;    return new Intl.NumberFormat('vi-VN', {&#10;      style: 'currency',&#10;      currency: 'VND'&#10;    }).format(price);&#10;  };&#10;&#10;  const handleAddToCart = (item: MenuItem) =&gt; {&#10;    dispatch({&#10;      type: &quot;ADD_ITEM&quot;,&#10;      payload: {&#10;        id: item.id.toString(),&#10;        name: item.name,&#10;        price: item.price,&#10;        imageUrl: item.image,&#10;      },&#10;    });&#10;  };&#10;&#10;  const handleUpdateQuantity = (itemId: string, quantity: number) =&gt; {&#10;    dispatch({&#10;      type: &quot;UPDATE_QUANTITY&quot;,&#10;      payload: { id: itemId, quantity },&#10;    });&#10;  };&#10;&#10;  const getQuantityInCart = (itemId: string) =&gt; {&#10;    const cartItem = state.items.find((item) =&gt; item.id === itemId);&#10;    return cartItem?.quantity || 0;&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;mb-8&quot;&gt;&#10;      &lt;h2 className=&quot;text-2xl font-bold text-foreground mb-4&quot;&gt;{section.category}&lt;/h2&gt;&#10;      &#10;      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 gap-4&quot;&gt;&#10;        {section.items.map((item) =&gt; {&#10;          const quantity = getQuantityInCart(item.id.toString());&#10;          &#10;          return (&#10;            &lt;Card key={item.id} className=&quot;group cursor-pointer overflow-hidden hover:shadow-lg transition-all duration-300&quot;&gt;&#10;              &lt;div className=&quot;flex&quot;&gt;&#10;                {/* Item Info */}&#10;                &lt;CardContent className=&quot;flex-1 p-4&quot;&gt;&#10;                  &lt;div className=&quot;flex items-start justify-between mb-2&quot;&gt;&#10;                    &lt;div className=&quot;flex-1&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center gap-2 mb-1&quot;&gt;&#10;                        &lt;h3 className=&quot;font-semibold text-lg text-foreground group-hover:text-primary transition-colors&quot;&gt;&#10;                          {item.name}&#10;                        &lt;/h3&gt;&#10;                        {item.popular &amp;&amp; (&#10;                          &lt;Badge className=&quot;bg-orange-100 text-orange-800 text-xs&quot;&gt;&#10;                            &lt;Star className=&quot;w-3 h-3 mr-1 fill-current&quot; /&gt;&#10;                            Phổ biến&#10;                          &lt;/Badge&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                      &#10;                      &lt;p className=&quot;text-sm text-muted-foreground mb-3 line-clamp-2&quot;&gt;&#10;                        {item.description}&#10;                      &lt;/p&gt;&#10;                      &#10;                      &lt;p className=&quot;text-xl font-bold text-primary mb-3&quot;&gt;&#10;                        {formatPrice(item.price)}&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &#10;                  {/* Add to Cart Controls */}&#10;                  &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                      Giao trong 15-20 phút&#10;                    &lt;/div&gt;&#10;                    &#10;                    {quantity === 0 ? (&#10;                      &lt;Button&#10;                        size=&quot;sm&quot;&#10;                        onClick={() =&gt; handleAddToCart(item)}&#10;                        className=&quot;h-8 px-4&quot;&#10;                      &gt;&#10;                        &lt;Plus className=&quot;w-4 h-4 mr-1&quot; /&gt;&#10;                        Thêm&#10;                      &lt;/Button&gt;&#10;                    ) : (&#10;                      &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                        &lt;Button&#10;                          variant=&quot;outline&quot;&#10;                          size=&quot;sm&quot;&#10;                          className=&quot;h-8 w-8 p-0&quot;&#10;                          onClick={() =&gt; handleUpdateQuantity(item.id.toString(), quantity - 1)}&#10;                        &gt;&#10;                          &lt;Minus className=&quot;w-3 h-3&quot; /&gt;&#10;                        &lt;/Button&gt;&#10;                        &lt;span className=&quot;font-semibold min-w-[2rem] text-center&quot;&gt;&#10;                          {quantity}&#10;                        &lt;/span&gt;&#10;                        &lt;Button&#10;                          size=&quot;sm&quot;&#10;                          className=&quot;h-8 w-8 p-0&quot;&#10;                          onClick={() =&gt; handleUpdateQuantity(item.id.toString(), quantity + 1)}&#10;                        &gt;&#10;                          &lt;Plus className=&quot;w-3 h-3&quot; /&gt;&#10;                        &lt;/Button&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                &lt;/CardContent&gt;&#10;&#10;                {/* Item Image */}&#10;                &lt;div className=&quot;w-24 md:w-32 h-24 md:h-32 relative flex-shrink-0&quot;&gt;&#10;                  &lt;img&#10;                    src={item.image}&#10;                    alt={item.name}&#10;                    className=&quot;w-full h-full object-cover group-hover:scale-105 transition-transform duration-300&quot;&#10;                  /&gt;&#10;                  {item.popular &amp;&amp; (&#10;                    &lt;div className=&quot;absolute top-1 right-1&quot;&gt;&#10;                      &lt;Badge className=&quot;bg-primary text-primary-foreground text-xs px-1 py-0&quot;&gt;&#10;                        HOT&#10;                      &lt;/Badge&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/Card&gt;&#10;          );&#10;        })}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default MenuSection;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/cnpm-fooddelivery/src/pages/HomePage.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/cnpm-fooddelivery/src/pages/HomePage.tsx" />
              <option name="originalContent" value="import Navigation from &quot;@/components/Navigation&quot;;&#10;import Banner from &quot;@/components/Banner&quot;;&#10;import ProductList from &quot;@/components/ProductList&quot;;&#10;import ProductFilter from &quot;@/components/ProductFilter&quot;;&#10;import RestaurantList, { type RestaurantItem } from &quot;@/components/RestaurantList&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import {useState, useEffect} from &quot;react&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import axios from &quot;axios&quot;;&#10;&#10;// Interface theo schema Product từ backend&#10;interface Product {&#10;  id: string;&#10;  sku: string;&#10;  name: string;&#10;  price: number;&#10;  description?: string;&#10;  imageUrl?: string;&#10;  isAvailable: boolean;&#10;  stockOnHand: number;&#10;  category?: {&#10;    id: string;&#10;    name: string;&#10;  };&#10;  createdAt: string;&#10;  updatedAt: string;&#10;}&#10;&#10;// Interface cho API response&#10;interface ProductsApiResponse {&#10;  success: boolean;&#10;  data: Product[];&#10;  message?: string;&#10;}&#10;&#10;// Store API response (from user-service via gateway)&#10;interface Store {&#10;  id: string;&#10;  name: string;&#10;  description?: string;&#10;  avatar?: string | null;&#10;  cover?: string | null;&#10;  address?: string | null;&#10;  ward?: string | null;&#10;  district?: string | null;&#10;  province?: string | null;&#10;  phone?: string | null;&#10;  email?: string | null;&#10;  openTime?: string | null;&#10;  closeTime?: string | null;&#10;  isActive?: boolean;&#10;  createdAt?: string;&#10;  updatedAt?: string;&#10;}&#10;&#10;interface StoresApiResponse {&#10;  success: boolean;&#10;  data: {&#10;    stores: Store[];&#10;    pagination: {&#10;      page: number;&#10;      limit: number;&#10;      total: number;&#10;      totalPages: number;&#10;    }&#10;  }&#10;}&#10;&#10;const API_BASE = &quot;http://localhost:3000&quot;; // via API Gateway&#10;&#10;const HomePage = () =&gt; {&#10;  const [products, setProducts] = useState&lt;Product[]&gt;([]);&#10;  const [productsLoading, setProductsLoading] = useState(true);&#10;&#10;  const [restaurants, setRestaurants] = useState&lt;RestaurantItem[]&gt;([]);&#10;  const [restaurantsLoading, setRestaurantsLoading] = useState(true);&#10;&#10;  const [selectedCategory, setSelectedCategory] = useState(&quot;all&quot;);&#10;&#10;  useEffect(() =&gt; {&#10;      fetchProducts();&#10;      fetchStores();&#10;  }, []);&#10;&#10;  const fetchProducts = async () =&gt; {&#10;    try {&#10;      setProductsLoading(true);&#10;      const response = await axios.get&lt;ProductsApiResponse&gt;(`${API_BASE}/api/products`);&#10;&#10;      // Kiểm tra response theo format của controller&#10;      if (response.data.success &amp;&amp; Array.isArray(response.data.data)) {&#10;        setProducts(response.data.data);&#10;      } else {&#10;        toast.error(&quot;Định dạng dữ liệu sản phẩm không hợp lệ!&quot;);&#10;        setProducts([]);&#10;      }&#10;    } catch (error) {&#10;      // eslint-disable-next-line no-console&#10;      console.error(&quot;Error fetching products:&quot;, error);&#10;      toast.error(&quot;Không thể tải danh sách sản phẩm!&quot;);&#10;      setProducts([]);&#10;    } finally {&#10;      setProductsLoading(false);&#10;    }&#10;  }&#10;&#10;  const fetchStores = async () =&gt; {&#10;    try {&#10;      setRestaurantsLoading(true);&#10;      const response = await axios.get&lt;StoresApiResponse&gt;(`${API_BASE}/api/stores`);&#10;&#10;      if (response.data.success &amp;&amp; Array.isArray(response.data.data?.stores)) {&#10;        const mapped: RestaurantItem[] = response.data.data.stores.map((store) =&gt; ({&#10;          id: store.id,&#10;          name: store.name,&#10;          image: store.cover || store.avatar || &quot;/burger-restaurant-storefront.png&quot;,&#10;          rating: 4.5, // tạm thời mock, backend chưa có rating&#10;          deliveryTime: &quot;20-30 phút&quot;,&#10;          deliveryFee: &quot;Miễn phí&quot;,&#10;          categories: [],&#10;          promo: &quot;Ưu đãi hấp dẫn&quot;,&#10;          distance: &quot;1.2km&quot;,&#10;        }));&#10;        setRestaurants(mapped);&#10;      } else {&#10;        toast.error(&quot;Định dạng dữ liệu cửa hàng không hợp lệ!&quot;);&#10;        setRestaurants([]);&#10;      }&#10;    } catch (error) {&#10;      // eslint-disable-next-line no-console&#10;      console.error(&quot;Error fetching stores:&quot;, error);&#10;      toast.error(&quot;Không thể tải danh sách nhà hàng!&quot;);&#10;      setRestaurants([]);&#10;    } finally {&#10;      setRestaurantsLoading(false);&#10;    }&#10;  }&#10;&#10;  const handleCategoryChange = (category: string) =&gt; {&#10;    setSelectedCategory(category);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-background&quot;&gt;&#10;      &lt;Navigation /&gt;&#10;      &lt;Banner /&gt;&#10;      &lt;div className=&quot;container mx-auto px-4 py-6 space-y-12&quot;&gt;&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;          &lt;ProductFilter&#10;            selectedCategory={selectedCategory}&#10;            onCategoryChange={handleCategoryChange}&#10;          /&gt;&#10;          &lt;ProductList products={products} loading={productsLoading} /&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;RestaurantList restaurants={restaurants} loading={restaurantsLoading} /&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default HomePage;&#10;" />
              <option name="updatedContent" value="import Navigation from &quot;@/components/Navigation&quot;;&#10;import Banner from &quot;@/components/Banner&quot;;&#10;import ProductList from &quot;@/components/ProductList&quot;;&#10;import ProductFilter from &quot;@/components/ProductFilter&quot;;&#10;import RestaurantList, { type RestaurantItem } from &quot;@/components/RestaurantList&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import {useState, useEffect} from &quot;react&quot;;&#10;import {toast} from &quot;sonner&quot;;&#10;import axios from &quot;axios&quot;;&#10;&#10;// Interface theo schema Product từ backend&#10;interface Product {&#10;  id: string;&#10;  sku: string;&#10;  name: string;&#10;  price: number;&#10;  description?: string;&#10;  imageUrl?: string;&#10;  isAvailable: boolean;&#10;  stockOnHand: number;&#10;  category?: {&#10;    id: string;&#10;    name: string;&#10;  };&#10;  createdAt: string;&#10;  updatedAt: string;&#10;}&#10;&#10;// Interface cho API response&#10;interface ProductsApiResponse {&#10;  success: boolean;&#10;  data: Product[];&#10;  message?: string;&#10;}&#10;&#10;// Store API response (from user-service via gateway)&#10;interface Store {&#10;  id: string;&#10;  name: string;&#10;  description?: string;&#10;  avatar?: string | null;&#10;  cover?: string | null;&#10;  address?: string | null;&#10;  ward?: string | null;&#10;  district?: string | null;&#10;  province?: string | null;&#10;  phone?: string | null;&#10;  email?: string | null;&#10;  openTime?: string | null;&#10;  closeTime?: string | null;&#10;  isActive?: boolean;&#10;  createdAt?: string;&#10;  updatedAt?: string;&#10;}&#10;&#10;interface StoresApiResponse {&#10;  success: boolean;&#10;  data: {&#10;    stores: Store[];&#10;    pagination: {&#10;      page: number;&#10;      limit: number;&#10;      total: number;&#10;      totalPages: number;&#10;    }&#10;  }&#10;}&#10;&#10;const API_BASE = &quot;http://localhost:3000&quot;; // via API Gateway&#10;&#10;const HomePage = () =&gt; {&#10;  const [products, setProducts] = useState&lt;Product[]&gt;([]);&#10;  const [productsLoading, setProductsLoading] = useState(true);&#10;&#10;  const [restaurants, setRestaurants] = useState&lt;RestaurantItem[]&gt;([]);&#10;  const [restaurantsLoading, setRestaurantsLoading] = useState(true);&#10;&#10;  const [selectedCategory, setSelectedCategory] = useState(&quot;all&quot;);&#10;&#10;  useEffect(() =&gt; {&#10;      fetchProducts();&#10;      fetchStores();&#10;  }, []);&#10;&#10;  const fetchProducts = async () =&gt; {&#10;    try {&#10;      setProductsLoading(true);&#10;      const response = await axios.get&lt;ProductsApiResponse&gt;(`${API_BASE}/api/products`);&#10;&#10;      // Kiểm tra response theo format của controller&#10;      if (response.data.success &amp;&amp; Array.isArray(response.data.data)) {&#10;        setProducts(response.data.data);&#10;      } else {&#10;        toast.error(&quot;Định dạng dữ liệu sản phẩm không hợp lệ!&quot;);&#10;        setProducts([]);&#10;      }&#10;    } catch (error) {&#10;      // eslint-disable-next-line no-console&#10;      console.error(&quot;Error fetching products:&quot;, error);&#10;      toast.error(&quot;Không thể tải danh sách sản phẩm!&quot;);&#10;      setProducts([]);&#10;    } finally {&#10;      setProductsLoading(false);&#10;    }&#10;  }&#10;&#10;  const fetchStores = async () =&gt; {&#10;    try {&#10;      setRestaurantsLoading(true);&#10;      const response = await axios.get&lt;StoresApiResponse&gt;(`${API_BASE}/api/stores`);&#10;&#10;      if (response.data.success &amp;&amp; Array.isArray(response.data.data?.stores)) {&#10;        const mapped: RestaurantItem[] = response.data.data.stores.map((store) =&gt; ({&#10;          id: store.id,&#10;          name: store.name,&#10;          image: store.cover || store.avatar || &quot;/burger-restaurant-storefront.png&quot;,&#10;          rating: 4.5, // tạm thời mock, backend chưa có rating&#10;          deliveryTime: &quot;20-30 phút&quot;,&#10;          deliveryFee: &quot;Miễn phí&quot;,&#10;          categories: [],&#10;          promo: &quot;Ưu đãi hấp dẫn&quot;,&#10;          distance: &quot;1.2km&quot;,&#10;        }));&#10;        setRestaurants(mapped);&#10;      } else {&#10;        toast.error(&quot;Định dạng dữ liệu cửa hàng không hợp lệ!&quot;);&#10;        setRestaurants([]);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching stores:&quot;, error);&#10;      toast.error(&quot;Không thể tải danh sách nhà hàng!&quot;);&#10;      setRestaurants([]);&#10;    } finally {&#10;      setRestaurantsLoading(false);&#10;    }&#10;  }&#10;&#10;  const handleCategoryChange = (category: string) =&gt; {&#10;    setSelectedCategory(category);&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-background&quot;&gt;&#10;      &lt;Navigation /&gt;&#10;      &lt;Banner /&gt;&#10;      &lt;div className=&quot;container mx-auto px-4 py-6 space-y-12&quot;&gt;&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;          &lt;ProductFilter&#10;            selectedCategory={selectedCategory}&#10;            onCategoryChange={handleCategoryChange}&#10;          /&gt;&#10;          &lt;ProductList products={products} loading={productsLoading} /&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;RestaurantList restaurants={restaurants} loading={restaurantsLoading} /&gt;&#10;      &lt;/div&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default HomePage;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/cnpm-fooddelivery/src/pages/RestaurantDetailPage.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/cnpm-fooddelivery/src/pages/RestaurantDetailPage.tsx" />
              <option name="originalContent" value="import { useEffect, useMemo, useState } from &quot;react&quot;;&#10;import Navigation from &quot;@/components/Navigation&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import RestaurantHeader from &quot;@/components/RestaurantHeader&quot;;&#10;import MenuSection from &quot;@/components/MenuSection&quot;;&#10;import CartButton from &quot;@/components/CartButton&quot;;&#10;import CartDrawer from &quot;@/components/CartDrawer&quot;;&#10;import { useParams } from &quot;react-router&quot;;&#10;import axios from &quot;axios&quot;;&#10;import { toast } from &quot;sonner&quot;;&#10;&#10;const API_BASE = &quot;http://localhost:3000&quot;; // API Gateway&#10;&#10;// Types matching backend responses&#10;interface StoreDetail {&#10;  id: string;&#10;  name: string;&#10;  description?: string;&#10;  avatar?: string | null;&#10;  cover?: string | null;&#10;  address?: string | null;&#10;  ward?: string | null;&#10;  district?: string | null;&#10;  province?: string | null;&#10;  phone?: string | null;&#10;  email?: string | null;&#10;  openTime?: string | null;&#10;  closeTime?: string | null;&#10;}&#10;&#10;interface StoreDetailResponse {&#10;  success: boolean;&#10;  data: StoreDetail;&#10;}&#10;&#10;interface ProductItem {&#10;  id: string;&#10;  sku: string;&#10;  name: string;&#10;  price: number;&#10;  description?: string | null;&#10;  imageUrl?: string | null;&#10;  isAvailable: boolean;&#10;  category?: { id: string; name: string } | null;&#10;}&#10;&#10;interface ProductsResponse {&#10;  success: boolean;&#10;  data: ProductItem[];&#10;}&#10;&#10;const RestaurantDetailPage = () =&gt; {&#10;  const { id } = useParams();&#10;  const [isCartOpen, setIsCartOpen] = useState(false);&#10;&#10;  const [store, setStore] = useState&lt;StoreDetail | null&gt;(null);&#10;  const [products, setProducts] = useState&lt;ProductItem[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;&#10;  useEffect(() =&gt; {&#10;    if (!id) return;&#10;&#10;    const run = async () =&gt; {&#10;      try {&#10;        setLoading(true);&#10;        const [storeRes, productsRes] = await Promise.all([&#10;          axios.get&lt;StoreDetailResponse&gt;(`${API_BASE}/api/stores/${id}`),&#10;          axios.get&lt;ProductsResponse&gt;(`${API_BASE}/api/products`, { params: { storeId: id } }),&#10;        ]);&#10;&#10;        if (storeRes.data.success &amp;&amp; storeRes.data.data) {&#10;          setStore(storeRes.data.data);&#10;        } else {&#10;          toast.error(&quot;Không tải được thông tin cửa hàng&quot;);&#10;        }&#10;&#10;        if (productsRes.data.success &amp;&amp; Array.isArray(productsRes.data.data)) {&#10;          setProducts(productsRes.data.data);&#10;        } else {&#10;          toast.error(&quot;Không tải được thực đơn của cửa hàng&quot;);&#10;        }&#10;      } catch (e) {&#10;        // eslint-disable-next-line no-console&#10;        console.error(&quot;Fetch restaurant detail failed&quot;, e);&#10;        toast.error(&quot;Có lỗi khi tải dữ liệu cửa hàng&quot;);&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    };&#10;&#10;    run();&#10;  }, [id]);&#10;&#10;  const restaurantHeaderData = useMemo(() =&gt; {&#10;    if (!store) return null;&#10;&#10;    const image = store.cover || store.avatar || &quot;/burger-restaurant-interior-modern.jpg&quot;;&#10;    const address = [store.address, store.ward, store.district, store.province]&#10;      .filter(Boolean)&#10;      .join(&quot;, &quot;);&#10;&#10;    // Derive categories from products' category names&#10;    const categories = Array.from(&#10;      new Set(&#10;        products&#10;          .map((p) =&gt; p.category?.name)&#10;          .filter((n): n is string =&gt; !!n)&#10;      )&#10;    );&#10;&#10;    return {&#10;      id: store.id,&#10;      name: store.name,&#10;      image,&#10;      rating: 4.6, // mock until rating service exists&#10;      reviewCount: 128, // mock&#10;      deliveryTime: &quot;20-30 phút&quot;,&#10;      deliveryFee: &quot;Miễn phí&quot;,&#10;      categories,&#10;      promo: &quot;Ưu đãi hấp dẫn&quot;,&#10;      distance: &quot;1.2km&quot;,&#10;      address: address || &quot;Đang cập nhật&quot;,&#10;      openTime: store.openTime &amp;&amp; store.closeTime ? `${store.openTime} - ${store.closeTime}` : &quot;08:00 - 22:00&quot;,&#10;    };&#10;  }, [store, products]);&#10;&#10;  const menuSections = useMemo(() =&gt; {&#10;    if (!products.length) return [] as { category: string; items: any[] }[];&#10;&#10;    const grouped: Record&lt;string, ProductItem[]&gt; = {};&#10;    for (const p of products) {&#10;      const key = p.category?.name || &quot;Khác&quot;;&#10;      grouped[key] = grouped[key] || [];&#10;      grouped[key].push(p);&#10;    }&#10;&#10;    return Object.entries(grouped).map(([category, items]) =&gt; ({&#10;      category,&#10;      items: items.map((it) =&gt; ({&#10;        id: it.id,&#10;        name: it.name,&#10;        description: it.description || &quot;&quot;,&#10;        price: it.price,&#10;        image: it.imageUrl || &quot;/placeholder.svg&quot;,&#10;        popular: false,&#10;      })),&#10;    }));&#10;  }, [products]);&#10;&#10;  const handleCartToggle = () =&gt; setIsCartOpen(true);&#10;  const handleCartClose = () =&gt; setIsCartOpen(false);&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-background&quot;&gt;&#10;      &lt;Navigation /&gt;&#10;      &lt;main className=&quot;relative&quot;&gt;&#10;        {restaurantHeaderData &amp;&amp; &lt;RestaurantHeader restaurant={restaurantHeaderData} /&gt;}&#10;        &lt;div className=&quot;container mx-auto px-4 py-6&quot;&gt;&#10;          &lt;div className=&quot;max-w-4xl mx-auto&quot;&gt;&#10;            {loading &amp;&amp; (&#10;              &lt;p className=&quot;text-center text-muted-foreground py-8&quot;&gt;Đang tải thực đơn...&lt;/p&gt;&#10;            )}&#10;            {!loading &amp;&amp; menuSections.length === 0 &amp;&amp; (&#10;              &lt;p className=&quot;text-center text-muted-foreground py-8&quot;&gt;Cửa hàng chưa có món nào.&lt;/p&gt;&#10;            )}&#10;            {!loading &amp;&amp;&#10;              menuSections.map((section) =&gt; (&#10;                &lt;MenuSection&#10;                  key={section.category}&#10;                  section={section}&#10;                  restaurantId={restaurantHeaderData?.id || id || &quot;&quot;}&#10;                  restaurantName={restaurantHeaderData?.name || store?.name || &quot;&quot;}&#10;                /&gt;&#10;              ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Cart Button - chỉ hiện khi có món trong giỏ */}&#10;        &lt;CartButton onClick={handleCartToggle} className=&quot;bottom-24&quot; /&gt;&#10;&#10;        {/* Cart Drawer */}&#10;        &lt;CartDrawer isOpen={isCartOpen} onClose={handleCartClose} /&gt;&#10;      &lt;/main&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default RestaurantDetailPage;&#10;" />
              <option name="updatedContent" value="import { useEffect, useMemo, useState } from &quot;react&quot;;&#10;import Navigation from &quot;@/components/Navigation&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import RestaurantHeader from &quot;@/components/RestaurantHeader&quot;;&#10;import MenuSection from &quot;@/components/MenuSection&quot;;&#10;import CartButton from &quot;@/components/CartButton&quot;;&#10;import CartDrawer from &quot;@/components/CartDrawer&quot;;&#10;import { useParams } from &quot;react-router&quot;;&#10;import axios from &quot;axios&quot;;&#10;import { toast } from &quot;sonner&quot;;&#10;&#10;const API_BASE = &quot;http://localhost:3000&quot;; // API Gateway&#10;&#10;// Types matching backend responses&#10;interface StoreDetail {&#10;  id: string;&#10;  name: string;&#10;  description?: string;&#10;  avatar?: string | null;&#10;  cover?: string | null;&#10;  address?: string | null;&#10;  ward?: string | null;&#10;  district?: string | null;&#10;  province?: string | null;&#10;  phone?: string | null;&#10;  email?: string | null;&#10;  openTime?: string | null;&#10;  closeTime?: string | null;&#10;}&#10;&#10;interface StoreDetailResponse {&#10;  success: boolean;&#10;  data: StoreDetail;&#10;}&#10;&#10;interface ProductItem {&#10;  id: string;&#10;  sku: string;&#10;  name: string;&#10;  price: number;&#10;  description?: string | null;&#10;  imageUrl?: string | null;&#10;  isAvailable: boolean;&#10;  category?: { id: string; name: string } | null;&#10;}&#10;&#10;interface ProductsResponse {&#10;  success: boolean;&#10;  data: ProductItem[];&#10;}&#10;&#10;const RestaurantDetailPage = () =&gt; {&#10;  const { id } = useParams();&#10;  const [isCartOpen, setIsCartOpen] = useState(false);&#10;&#10;  const [store, setStore] = useState&lt;StoreDetail | null&gt;(null);&#10;  const [products, setProducts] = useState&lt;ProductItem[]&gt;([]);&#10;  const [loading, setLoading] = useState(true);&#10;&#10;  useEffect(() =&gt; {&#10;    if (!id) return;&#10;&#10;    const run = async () =&gt; {&#10;      try {&#10;        setLoading(true);&#10;        const [storeRes, productsRes] = await Promise.all([&#10;          axios.get&lt;StoreDetailResponse&gt;(`${API_BASE}/api/stores/${id}`),&#10;          axios.get&lt;ProductsResponse&gt;(`${API_BASE}/api/products`, { params: { storeId: id } }),&#10;        ]);&#10;&#10;        if (storeRes.data.success &amp;&amp; storeRes.data.data) {&#10;          setStore(storeRes.data.data);&#10;        } else {&#10;          toast.error(&quot;Không tải được thông tin cửa hàng&quot;);&#10;        }&#10;&#10;        if (productsRes.data.success &amp;&amp; Array.isArray(productsRes.data.data)) {&#10;          setProducts(productsRes.data.data);&#10;        } else {&#10;          toast.error(&quot;Không tải được thực đơn của cửa hàng&quot;);&#10;        }&#10;      } catch (e) {&#10;        // eslint-disable-next-line no-console&#10;        console.error(&quot;Fetch restaurant detail failed&quot;, e);&#10;        toast.error(&quot;Có lỗi khi tải dữ liệu cửa hàng&quot;);&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    };&#10;&#10;    run();&#10;  }, [id]);&#10;&#10;  const restaurantHeaderData = useMemo(() =&gt; {&#10;    if (!store) return null;&#10;&#10;    const image = store.cover || store.avatar || &quot;/burger-restaurant-interior-modern.jpg&quot;;&#10;    const address = [store.address, store.ward, store.district, store.province]&#10;      .filter(Boolean)&#10;      .join(&quot;, &quot;);&#10;&#10;    // Derive categories from products' category names&#10;    const categories = Array.from(&#10;      new Set(&#10;        products&#10;          .map((p) =&gt; p.category?.name)&#10;          .filter((n): n is string =&gt; !!n)&#10;      )&#10;    );&#10;&#10;    return {&#10;      id: store.id,&#10;      name: store.name,&#10;      image,&#10;      rating: 4.6, // mock until rating service exists&#10;      reviewCount: 128, // mock&#10;      deliveryTime: &quot;20-30 phút&quot;,&#10;      deliveryFee: &quot;Miễn phí&quot;,&#10;      categories,&#10;      promo: &quot;Ưu đãi hấp dẫn&quot;,&#10;      distance: &quot;1.2km&quot;,&#10;      address: address || &quot;Đang cập nhật&quot;,&#10;      openTime: store.openTime &amp;&amp; store.closeTime ? `${store.openTime} - ${store.closeTime}` : &quot;08:00 - 22:00&quot;,&#10;    };&#10;  }, [store, products]);&#10;&#10;  const menuSections = useMemo(() =&gt; {&#10;    if (!products.length) return [] as { category: string; items: ProductItem[] }[];&#10;&#10;    const grouped: Record&lt;string, ProductItem[]&gt; = {};&#10;    for (const p of products) {&#10;      const key = p.category?.name || &quot;Khác&quot;;&#10;      grouped[key] = grouped[key] || [];&#10;      grouped[key].push(p);&#10;    }&#10;&#10;    return Object.entries(grouped).map(([category, items]) =&gt; ({&#10;      category,&#10;      items: items.map((it) =&gt; ({&#10;        id: it.id,&#10;        name: it.name,&#10;        description: it.description || &quot;&quot;,&#10;        price: it.price,&#10;        image: it.imageUrl || &quot;/placeholder.svg&quot;,&#10;        popular: false,&#10;      })),&#10;    }));&#10;  }, [products]);&#10;&#10;  const handleCartToggle = () =&gt; setIsCartOpen(true);&#10;  const handleCartClose = () =&gt; setIsCartOpen(false);&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-background&quot;&gt;&#10;      &lt;Navigation /&gt;&#10;      &lt;main className=&quot;relative&quot;&gt;&#10;        {restaurantHeaderData &amp;&amp; &lt;RestaurantHeader restaurant={restaurantHeaderData} /&gt;}&#10;        &lt;div className=&quot;container mx-auto px-4 py-6&quot;&gt;&#10;          &lt;div className=&quot;max-w-4xl mx-auto&quot;&gt;&#10;            {loading &amp;&amp; (&#10;              &lt;p className=&quot;text-center text-muted-foreground py-8&quot;&gt;Đang tải thực đơn...&lt;/p&gt;&#10;            )}&#10;            {!loading &amp;&amp; menuSections.length === 0 &amp;&amp; (&#10;              &lt;p className=&quot;text-center text-muted-foreground py-8&quot;&gt;Cửa hàng chưa có món nào.&lt;/p&gt;&#10;            )}&#10;            {!loading &amp;&amp;&#10;              menuSections.map((section) =&gt; (&#10;                &lt;MenuSection&#10;                  key={section.category}&#10;                  section={section}&#10;                  restaurantId={restaurantHeaderData?.id || id || &quot;&quot;}&#10;                  restaurantName={restaurantHeaderData?.name || store?.name || &quot;&quot;}&#10;                /&gt;&#10;              ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Cart Button - chỉ hiện khi có món trong giỏ */}&#10;        &lt;CartButton onClick={handleCartToggle} className=&quot;bottom-24&quot; /&gt;&#10;&#10;        {/* Cart Drawer */}&#10;        &lt;CartDrawer isOpen={isCartOpen} onClose={handleCartClose} /&gt;&#10;      &lt;/main&gt;&#10;      &lt;Footer /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default RestaurantDetailPage;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>